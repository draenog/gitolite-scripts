#!/bin/sh

# Maximum file size in bytes
MAX_SIZE=200000
DIFF_MAX_SIZE=2000000

bad_file_found=0
new_rev=$3
tmp=$(mktemp /tmp/git.update.XXXXXX)
revlist=$(mktemp /tmp/git.update.XXXXXX)
difflist=$(mktemp /tmp/git.update.XXXXXX)
zero="0000000000000000000000000000000000000000"

[ $new_rev = $zero ] || git rev-list $new_rev --not --all > $revlist
while read rev; do
   git diff-tree -r --root $rev > $difflist
   while read old_mode new_mode old_sha1 new_sha1 status name; do
       # skip lines showing parent commit
       [[ -z "$new_sha1" ]] && continue

       # skip deletions
       [[ "$new_sha1" = "$zero" ]] && continue

       # Skip files named *patch
       if [[ "${name%@(.patch|.diff|.spec)}" != "$name" ]]; then
           continue
       fi

       git cat-file blob $new_sha1 > $tmp
       ftype="$((file "$tmp" | awk -F': ' '{print $2}') 2>/dev/null)"
       fsize=$(stat -c%s "$tmp")

       # Banned archive types
       #echo $ftype
       case "$ftype" in
           *"Zip archive"*)
                echo "File $name - please upload zip files to the distfiles instead"
                bad_file_found=1
                ;;
           *"compressed data"*)
                echo "File $name - please upload compressed files to the distfiles instead"
                bad_file_found=1
                ;;
           *"tar archive*"*)
                echo "File $name - please upload tarballs to the distfiles instead"
                bad_file_found=1
                ;;
           *'unified diff output'*)
                ;;
           *'English text'*|*'ASCII text'*|*'ISO-8859 text'*|*'UTF-8 Unicode text'*|*'ASCII C program text'*)
                if [[ $fsize -gt $DIFF_MAX_SIZE ]]; then
                    echo "File $name - exceeds maximum permitted size $DIFF_MAX_SIZE"
                    bad_file_found=1
                fi
                ;;
           *)
                if [[ $fsize -gt $MAX_SIZE ]]; then
                    echo "File $name - $fsize exceeds maximum permitted size $MAX_SIZE"
                    echo "$ftype"
                    bad_file_found=1
                fi
                ;;
        esac
   done < $difflist
done < $revlist

rm -f $tmp $difflist $revlist
if [[ $bad_file_found -eq 1 ]]; then
    echo "===================="
    echo "Your commit contained problematic files."
    echo "===================="
fi

exit $bad_file_found
